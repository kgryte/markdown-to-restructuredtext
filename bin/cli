#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var md2rst = require( './../lib' );


// VARIABLES //

var outFile;
var inFile;
var args;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 0 );
}


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.version );
	return;
}


// OPTIONS //

opts = {};

inFile = args._[ 0 ];
if ( args.output ) {
	outFile = args.output;
} else {
	outFile = inFile.replace( /\.markdown$|\.md$/, '.rst' );
}
if ( args.flavor ) {
	opts.flavor = args.flavor;
}


// CONVERT //

md2rst( outFile, inFile, opts, clbk );

/**
* FUNCTION: clbk( [error] )
*	Callback invoked upon attempting to convert an input file.
*
* @private
* @param {Error} [error] - error object
* @returns {Void}
*/
function clbk( error ) {
	if ( error ) {
		throw error;
	}
}
